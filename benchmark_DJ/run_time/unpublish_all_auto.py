#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ publishedWorkflowId —Å–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

from db import get_collection
from bson import ObjectId

def unpublish_all_workflows():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–∞–µ—Ç publishedWorkflowId —Å–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    print("üîì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("=" * 55)
    
    projects_collection = get_collection('projects')
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
    all_projects = list(projects_collection.find({}))
    published_projects = [p for p in all_projects if p.get('publishedWorkflowId')]
    unpublished_projects = [p for p in all_projects if not p.get('publishedWorkflowId')]
    
    print(f"   üìå –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(published_projects)}")
    print(f"   üìù –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(unpublished_projects)}")
    
    if not published_projects:
        print("\nüí° –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return 0
    
    print(f"\nüîÑ –°–Ω–∏–º–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å {len(published_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    
    updated_count = 0
    for project in published_projects:
        project_id = project['_id']
        project_name = project.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        published_id = project.get('publishedWorkflowId')
        
        # –°–Ω–∏–º–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        result = projects_collection.update_one(
            {"_id": project_id},
            {"$unset": {"publishedWorkflowId": ""}}
        )
        
        if result.modified_count > 0:
            updated_count += 1
            print(f"   üîì '{project_name}' ({project_id[:8]}...): —Å–Ω—è—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è {published_id[:8]}...")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   ‚úÖ –°–Ω—è—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å {updated_count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"   üìù –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(all_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    final_published = list(projects_collection.find({"publishedWorkflowId": {"$exists": True, "$ne": None}}))
    final_unpublished = list(projects_collection.find({"$or": [
        {"publishedWorkflowId": {"$exists": False}},
        {"publishedWorkflowId": None}
    ]}))
    
    print(f"   üìå –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(final_published)}")
    print(f"   üìù –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(final_unpublished)}")
    
    if len(final_published) == 0:
        print(f"\nüéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        print(f"\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ {len(final_published)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    return updated_count

# if __name__ == "__main__":
#     unpublish_all_workflows() 