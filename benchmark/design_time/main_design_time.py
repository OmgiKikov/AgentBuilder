import asyncio
import json
import os
import sys
from typing import List, Dict, Any, Optional
from openai import OpenAI

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from apps.copilot.simple_chat_client import SimpleCopilotClient, UserMessage, AssistantMessage

class MockGPTAgent:
    """
    Mock –∞–≥–µ–Ω—Ç –Ω–∞ GPT –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Copilot
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    """
    
    def __init__(
        self,
        copilot_base_url: str = "http://localhost:3002",
        copilot_api_key: str = None,
        rowboat_base_url: str = "http://localhost:3000",
        openai_model: str = "gpt-4.1",
        openai_model_eval: str = "gpt-4.1",
        openai_api_key: str = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mock –∞–≥–µ–Ω—Ç–∞
        
        Args:
            copilot_base_url: URL —Å–µ—Ä–≤–µ—Ä–∞ Copilot
            copilot_api_key: API –∫–ª—é—á –¥–ª—è Copilot
            rowboat_base_url: URL —Å–µ—Ä–≤–µ—Ä–∞ Rowboat
            openai_model: –ú–æ–¥–µ–ª—å OpenAI –¥–ª—è mock –∞–≥–µ–Ω—Ç–∞
            openai_api_key: API –∫–ª—é—á OpenAI
        """
        self.copilot_client = SimpleCopilotClient(
            base_url=copilot_base_url,
            api_key=copilot_api_key,
            rowboat_base_url=rowboat_base_url
        )
        
        self.openai_client = OpenAI(api_key=openai_api_key)
        self.openai_model = openai_model
        self.openai_model_eval = openai_model_eval
        
    def check_services(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤"""
        if not self.copilot_client.health_check():
            print("‚ùå Copilot —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return False
        print("‚úÖ Copilot —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!")
        return True
    
    def load_workflow(self, project_id: str, workflow_id: str = None) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç workflow –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        return self.copilot_client.load_workflow_from_project(project_id, workflow_id)
    
    async def simulate_conversation(
        self,
        agent_prompt: str,
        max_iterations: int = 5,
        initial_message: str = None,
        pass_criteria: list = None,
        temperature: float = 0
    ) -> Dict[str, Any]:
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É mock –∞–≥–µ–Ω—Ç–æ–º –∏ Copilot
        
        Args:
            agent_prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è mock –∞–≥–µ–Ω—Ç–∞ (–µ–≥–æ —Ä–æ–ª—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            max_iterations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            initial_message: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∞–≥–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–∞–º)
            pass_criteria: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è OpenAI –º–æ–¥–µ–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        """
        print(f"ü§ñ –ù–∞—á–∏–Ω–∞—é —Å–∏–º—É–ª—è—Ü–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ({max_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
        print(f"üìù –ü—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞: {agent_prompt[:100]}...")
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI (—Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞)
        agent_messages = [
            {
                "role": "system",
                "content": agent_prompt
            }
        ]
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Copilot
        copilot_messages = []
        
        # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        conversation_history = []
        
        loop = asyncio.get_running_loop()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if initial_message:
            agent_content = initial_message
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {agent_content}")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
            print("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞...")
            agent_response = await loop.run_in_executor(
                None,
                lambda: self.openai_client.chat.completions.create(
                    model=self.openai_model,
                    messages=agent_messages + [{"role": "user", "content": "–ù–∞—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–π —Ä–æ–ª–∏."}],
                    temperature=temperature
                )
            )
            agent_content = agent_response.choices[0].message.content.strip()
            print(f"üë§ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: {agent_content}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏
        for iteration in range(max_iterations):
            print(f"\n--- –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{max_iterations} ---")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history.append({
                "role": "user",
                "content": agent_content,
                "source": "mock_agent"
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Copilot
            copilot_messages.append(UserMessage(content=agent_content))
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Copilot: {agent_content}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Copilot
                copilot_response = self.copilot_client.get_full_response(
                    messages=copilot_messages
                )
                
                print(f"üì• –û—Ç–≤–µ—Ç Copilot: {copilot_response}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Copilot –≤ –∏—Å—Ç–æ—Ä–∏—é
                copilot_messages.append(AssistantMessage(content=copilot_response))
                conversation_history.append({
                    "role": "assistant", 
                    "content": copilot_response,
                    "source": "copilot"
                })
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if iteration == max_iterations - 1:
                    break
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                agent_messages.append({"role": "assistant", "content": agent_content})
                agent_messages.append({"role": "user", "content": copilot_response})
                
                print("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
                agent_response = await loop.run_in_executor(
                    None,
                    lambda: self.openai_client.chat.completions.create(
                        model=self.openai_model,
                        messages=agent_messages,
                        temperature=temperature
                    )
                )
                
                agent_content = agent_response.choices[0].message.content.strip()
                print(f"üë§ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: {agent_content}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å Copilot: {e}")
                conversation_history.append({
                    "role": "error",
                    "content": f"–û—à–∏–±–∫–∞: {str(e)}",
                    "source": "system"
                })
                break
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "conversation_history": conversation_history,
            "total_iterations": len([msg for msg in conversation_history if msg["source"] == "mock_agent"]),
            "agent_prompt": agent_prompt,
            "success": True
        }
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏, –ø—Ä–æ–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫—É
        if pass_criteria:
            print("\nüìä –ü—Ä–æ–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...")
            result_evaluation = []
            for test_criterias in pass_criteria:
                test_pass = test_criterias["passCriteria"]
                try:
                    evaluation_result = await self._evaluate_conversation(
                        conversation_history, test_pass, loop
                    )
                    eval_result = evaluation_result["evaluation"]
                    eval_result["test_name"] = test_criterias["test_name"]
                    result_evaluation.append(eval_result)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {e}")
                    result["evaluation_error"] = str(e)
            result["evaluation"] = result_evaluation
        print(f"\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–µ—Ä–∞—Ü–∏–π: {result['total_iterations']}")
        return result
    
    async def _evaluate_conversation(
        self, 
        conversation_history: List[Dict[str, Any]], 
        pass_criteria: str,
        loop
    ) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        transcript_str = ""
        for msg in conversation_history:
            if msg["source"] in ["mock_agent", "copilot"]:
                role = "USER" if msg["source"] == "mock_agent" else "ASSISTANT"
                transcript_str += f"{role}: {msg['content']}\n"
        
        evaluation_prompt = [
            {
                "role": "system",
                "content": (
                    f"–¢—ã —Å—Ç—Ä–æ–≥–∏–π –æ—Ü–µ–Ω—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–∏—Ä–∞–µ—Ç—Å—è –∫ –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ó–∞–º–µ—á–µ–Ω–∏–µ: –∫–æ–≥–¥–∞ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞ - –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ copilot_change –≤ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è. –°–º–æ—Ç—Ä–∏ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏—á–µ–≥–æ! –û—Ü–µ–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é (—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–µ–≥–æ):\n"
                    f"{pass_criteria}\n\n"
                    "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    '{"verdict": "pass", "details": <–ø—Ä–∏—á–∏–Ω–∞>} –∏–ª–∏ '
                    '{"verdict": "fail", "details": <–ø—Ä–∏—á–∏–Ω–∞>}.'
                )
            },
            {
                "role": "user",
                "content": (
                    f"–í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n{transcript_str}\n\n"
                    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º? "
                    "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ 'pass' –∏–ª–∏ 'fail' –¥–ª—è verdict –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è details."
                )
            }
        ]
        
        eval_response = await loop.run_in_executor(
            None,
            lambda: self.openai_client.chat.completions.create(
                model=self.openai_model_eval,
                messages=evaluation_prompt,
                temperature=0.0,
                response_format={"type": "json_object"}
            )
        )
        
        response_json_str = eval_response.choices[0].message.content
        response_json = json.loads(response_json_str)
        
        verdict = response_json.get("verdict")
        details = response_json.get("details")
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏: {verdict}")
        print(f"üìù –î–µ—Ç–∞–ª–∏: {details}")
        
        return {
            "evaluation": {
                "verdict": verdict,
                "details": details,
                "pass_criteria": pass_criteria
            }
        }
    
    def print_conversation(self, conversation_history: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print("\n" + "="*50)
        print("üìú –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê")
        print("="*50)
        
        for i, msg in enumerate(conversation_history, 1):
            source_emoji = "üë§" if msg["source"] == "mock_agent" else "ü§ñ" if msg["source"] == "copilot" else "‚ö†Ô∏è"
            source_name = "Mock Agent" if msg["source"] == "mock_agent" else "Copilot" if msg["source"] == "copilot" else "System"
            
            print(f"\n{i}. {source_emoji} {source_name}:")
            print(f"   {msg['content']}")
        
        print("\n" + "="*50)


async def main(model_name):
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MockGPTAgent"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ designtime.json
    with open("benchmark/design_time/designtime.json", 'r', encoding='utf-8') as f:
        design_time_config = json.load(f)
    
    benchmark_processed = []
    for test in design_time_config:
        print("="*10, test["scenario_name"], "="*10)
        api_key = test["PROJECT_API_KEY"]
        project_id = test["PROJECT_ID"]
        
        agent = MockGPTAgent(
            copilot_api_key=api_key
        )
        
        if not agent.check_services():
            return
        
        if agent.load_workflow(project_id):
            print("‚úÖ Workflow –∑–∞–≥—Ä—É–∂–µ–Ω!")
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π workflow")
        
        description = test["scenario_description"]
        agent_prompt = f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞, —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é—â–µ–≥–æ —Å —á–∞—Ç-–±–æ—Ç–æ–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç —Ä–æ–ª—å —á–∞—Ç-–±–æ—Ç–∞). –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Ç —Å —á–∞—Ç-–±–æ—Ç–æ–º. –°—Ü–µ–Ω–∞—Ä–∏–π:\n{description}\n\n –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        pass_criteria = test["list_of_passCriteria"]# [0]["passCriteria"]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        result = await agent.simulate_conversation(
            agent_prompt=agent_prompt,
            max_iterations=test["MAX_DIALOG_ITERATIONS"],
            initial_message=test["first_message"],
            pass_criteria=pass_criteria,
            temperature=0.7
        )
        
        result["scenario_name"] = test["scenario_name"]
        benchmark_processed.append(result)

    with open(f"benchmark/design_time/design_time_result_{model_name}.json", 'w', encoding='utf-8') as f:
        json.dump(benchmark_processed, f, ensure_ascii=False, indent=2)
        
    # # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    # agent.print_conversation(result["conversation_history"])
    
    # if "evaluation" in result:
    #     print(f"\nüìä –û–¶–ï–ù–ö–ê: {result['evaluation']['verdict'].upper()}")
    #     print(f"üìù –î–µ—Ç–∞–ª–∏: {result['evaluation']['details']}")


if __name__ == "__main__":
    model_name = "qwen-2.5-72b-instruct"
    asyncio.run(main(model_name)) 