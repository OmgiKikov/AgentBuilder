from datetime import datetime, timezone
from bson import ObjectId
import sys
import os 

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from apps.experimental.simulation_runner.db import get_collection
import json

def create_real_test_data(test_info):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ project_id –∏ workflow_id
    """
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID...")
    
    
    # 0d7b099e-e9de-46d9-af6a-238d4ffdc58d - 682ec065938b40039d5bf7ec
    # c3b22e6f-fb29-44eb-a2db-f2af4fe199ca - 6834050b3e2b3ae5ac7f4ea1
    REAL_PROJECT_ID = test_info["REAL_PROJECT_ID"]
    REAL_WORKFLOW_ID = test_info["REAL_WORKFLOW_ID"]
    
    print(f"   üìã Project ID: {REAL_PROJECT_ID}")
    print(f"   üîÑ Workflow ID: {REAL_WORKFLOW_ID}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    project_short_name = REAL_PROJECT_ID[:8]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ ID
    
    # # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    # collections_to_clear = ["test_scenarios", "test_simulations", "test_runs", "test_results"]
    # for collection_name in collections_to_clear:
    #     collection = get_collection(collection_name)
    #     result = collection.delete_many({
    #         "projectId": REAL_PROJECT_ID,
    #         "name": {"$regex": "^–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç"}
    #     })
    #     if result.deleted_count > 0:
    #         print(f"   –û—á–∏—â–µ–Ω–æ {result.deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {collection_name} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {REAL_PROJECT_ID}")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario_id = str(ObjectId())
    test_scenario = {
        "_id": ObjectId(scenario_id),
        "projectId": REAL_PROJECT_ID,
        "name": test_info["scenario_name"],
        "description": test_info["scenario_description"],
        "createdAt": datetime.now(timezone.utc),
        "lastUpdatedAt": datetime.now(timezone.utc)
    }
    
    scenarios_collection = get_collection("test_scenarios")
    scenarios_collection.insert_one(test_scenario)
    print(f"   ‚úì –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_id}")
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é
    simulation_id = str(ObjectId())
    test_simulation = {
        "_id": ObjectId(simulation_id),
        "projectId": REAL_PROJECT_ID,
        "name": test_info["simulation_name"],
        "scenarioId": scenario_id,
        "profileId": test_info["profileId"],
        "passCriteria": test_info["passCriteria"],
        "createdAt": datetime.now(timezone.utc),
        "lastUpdatedAt": datetime.now(timezone.utc)
    }
    
    simulations_collection = get_collection("test_simulations")
    simulations_collection.insert_one(test_simulation)
    print(f"   ‚úì –°–∏–º—É–ª—è—Ü–∏—è: {simulation_id}")
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    run_id = str(ObjectId())
    test_run = {
        "_id": ObjectId(run_id),
        "projectId": REAL_PROJECT_ID,
        "name": f"–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ ({project_short_name})",
        "simulationIds": [simulation_id],
        "workflowId": REAL_WORKFLOW_ID,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π workflow ID
        "status": "pending",
        "startedAt": datetime.now(timezone.utc),
        "completedAt": None,
        "aggregateResults": None,
        "lastHeartbeat": None
    }
    
    runs_collection = get_collection("test_runs")
    runs_collection.insert_one(test_run)
    print(f"   ‚úì –ó–∞–ø—É—Å–∫: {run_id} (—Å—Ç–∞—Ç—É—Å: pending)")
    
    print("\nüéâ –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
    print(f"   üìã –°—Ü–µ–Ω–∞—Ä–∏–π ID: {scenario_id}")
    print(f"   üîÑ –°–∏–º—É–ª—è—Ü–∏—è ID: {simulation_id}")
    print(f"   ‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ ID: {run_id}")
    print(f"   üè¢ –ü—Ä–æ–µ–∫—Ç: {REAL_PROJECT_ID}")
    print(f"   ‚ö° Workflow: {REAL_WORKFLOW_ID}")
    print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫ service.py –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID!")
    
    return run_id

if __name__ == "__main__":
    with open('benchmark/run_time/runtime.json', 'r', encoding='utf-8') as f:
        runtime_data = json.load(f)
    for test_info in runtime_data:
        create_real_test_data(test_info) 