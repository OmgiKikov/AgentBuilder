import json
import urllib.request
import urllib.parse
import urllib.error
import os
from typing import List, Optional, Dict, Any, Generator
from openai import OpenAI
import asyncio


MODEL_NAME = "gpt-4o-mini"
openai_client = OpenAI()

def evaluation(pass_criteria, transcript_str):
    evaluation_prompt = [
        {
            "role": "system",
            "content": (
                f"You are a neutral evaluator. Evaluate based on these criteria:\n"
                f"{pass_criteria}\n\n"
                "Return ONLY a JSON object in this format:\n"
                '{"verdict": "pass", "details": <reason>} or '
                '{"verdict": "fail", "details": <reason>}.'
            )
        },
        {
            "role": "user",
            "content": (
                f"Here is the conversation transcript:\n\n{transcript_str}\n\n"
                "Did the support bot answer correctly or not? "
                "Return only 'pass' or 'fail' for verdict, and a brief explanation for details."
            )
        }
    ]

    # Run evaluation in a separate thread
    print(f"üß† –í—ã–∑–æ–≤ OpenAI API –¥–ª—è –æ—Ü–µ–Ω–∫–∏...")
    eval_response = openai_client.chat.completions.create(
            model=MODEL_NAME,
            messages=evaluation_prompt,
            temperature=0.0,
            response_format={"type": "json_object"}
        )

    if not eval_response.choices:
        raise Exception("No evaluation response received from model")

    response_json_str = eval_response.choices[0].message.content
    # Attempt to parse the JSON
    response_json = json.loads(response_json_str)
    evaluation_result = response_json.get("verdict")
    details = response_json.get("details")
    return evaluation_result, details


class UserMessage:
    def __init__(self, content: str):
        self.role = "user"
        self.content = content


class AssistantMessage:
    def __init__(self, content: str):
        self.role = "assistant"
        self.content = content


class DataSource:
    def __init__(self, id: str, name: str, description: str = None, 
                 active: bool = True, status: str = "ready", 
                 error: str = None, data: Dict[str, Any] = None):
        self.id = id
        self.name = name
        self.description = description
        self.active = active
        self.status = status
        self.error = error
        self.data = data or {}


class SimpleCopilotClient:
    def __init__(self, base_url: str = "http://localhost:3002", api_key: str = None, workflow: Dict[str, Any] = None, rowboat_base_url: str = "http://localhost:3000"):
        """
        –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Copilot API –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ Copilot
            api_key: API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            workflow: –ì–æ—Ç–æ–≤—ã–π workflow —Å –∞–≥–µ–Ω—Ç–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            rowboat_base_url: –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ Rowboat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ workflows
        """
        self.base_url = base_url.rstrip('/')
        self.rowboat_base_url = rowboat_base_url.rstrip('/')
        self.api_key = api_key or os.getenv('API_KEY', '')
        self.workflow = workflow

    def get_projects(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Rowboat API
        """
        try:
            url = f"{self.rowboat_base_url}/api/projects"
            req = urllib.request.Request(url)
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.status == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            
        return []

    def get_workflows(self, project_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ workflows –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Rowboat API
        """
        try:
            url = f"{self.rowboat_base_url}/api/projects/{project_id}/workflows"
            req = urllib.request.Request(url)
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.status == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflows: {e}")
            
        return []
    
    def get_datasource(self, project_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ datasource –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Rowboat API
        """
        try:
            url = f"{self.rowboat_base_url}/api/projects/{project_id}/sources"
            headers = {
                'Content-Type': 'application/json'
            }
            if self.api_key:
                headers['Authorization'] = f'Bearer {self.api_key}'
                
            req = urllib.request.Request(url, headers=headers)
            
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.status == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    return data
            
            return DataSource(**response.json())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è datasources: {e}")
            
        return []

    def load_workflow_from_project(self, project_id: str, workflow_id: str = None) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç workflow –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        
        Args:
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            workflow_id: ID workflow (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π)
            
        Returns:
            bool: True –µ—Å–ª–∏ workflow —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            projects = self.get_projects()
            current_project = next((p for p in projects if p.get('_id') == project_id), None)
            
            workflows = self.get_workflows(project_id)
            if not workflows:
                print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ workflows –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º workflow
            selected_workflow = None
            if workflow_id:
                selected_workflow = next((w for w in workflows if w.get('_id') == workflow_id), None)
            else:
                selected_workflow = workflows[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            
            if not selected_workflow:
                print(f"Workflow –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ø–æ–ª—É—á–∞–µ–º data source
            selected_workflow["datasource"] = self.get_datasource(project_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –≤ workflow
            if current_project and 'mcpServers' in current_project:
                mcp_tools = []
                for server in current_project['mcpServers']:
                    if server.get('isActive', False) and server.get('isReady', False):
                        for tool in server.get('tools', []):
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç workflow
                            workflow_tool = {
                                "name": tool.get('name', tool.get('id')),
                                "description": tool.get('description', ''),
                                "parameters": tool.get('parameters', {}),
                                "isLibrary": False,  # MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–º–∏
                                "mcpServer": server.get('name'),  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
                                "mcpToolId": tool.get('id')  # –î–æ–±–∞–≤–ª—è–µ–º ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                            }
                            mcp_tools.append(workflow_tool)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã workflow —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                existing_tools = selected_workflow.get('tools', [])
                selected_workflow['tools'] = existing_tools + mcp_tools
                
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(mcp_tools)}")
                for tool in mcp_tools:
                    print(f"  - {tool['name']}: {tool['description']}")
            
            self.workflow = selected_workflow
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω workflow: {selected_workflow.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
            print(f"–ê–≥–µ–Ω—Ç–æ–≤: {len(selected_workflow.get('agents', []))}")
            print(f"–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(selected_workflow.get('tools', []))}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow: {e}")
            return False

    def _get_default_workflow(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π workflow —Å Example Agent
        """
        return {
            "name": "Default Workflow",
            "agents": [
                {
                    "name": "Example Agent",
                    "description": "An example agent",
                    "instructions": "## üßë‚Äç Role:\nYou are an helpful customer support assistant\n\n---\n## ‚öôÔ∏è Steps to Follow:\n1. Ask the user what they would like help with\n2. Ask the user for their email address and let them know someone will contact them soon.\n\n---\n## üéØ Scope:\n‚úÖ In Scope:\n- Asking the user their issue\n- Getting their email\n\n‚ùå Out of Scope:\n- Questions unrelated to customer support\n- If a question is out of scope, politely inform the user and avoid providing an answer.\n\n---\n## üìã Guidelines:\n‚úîÔ∏è Dos:\n- ask user their issue\n\n‚ùå Don'ts:\n- don't ask user any other detail than email",
                    "model": "gpt-4.1",
                    "type": "conversation",
                    "disabled": False,
                    "order": 0
                }
            ],
            "tools": [],
            "prompts": [],
            "startAgent": "Example Agent"
        }

    def set_workflow(self, workflow: Dict[str, Any]):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç workflow
        """
        self.workflow = workflow

    def get_workflow_schema(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å—Ö–µ–º—É –¥–ª—è workflow
        """
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ workflow –¥–ª—è Copilot
        schema = {
            "type": "object",
            "properties": {
                "name": {"type": "string"},
                "agents": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string"},
                            "description": {"type": "string"},
                            "instructions": {"type": "string"},
                            "model": {"type": "string"},
                            "type": {"type": "string", "enum": ["conversation", "post_process", "escalation"]},
                            "disabled": {"type": "boolean"},
                            "order": {"type": "number"}
                        }
                    }
                },
                "tools": {"type": "array"},
                "prompts": {"type": "array"},
                "startAgent": {"type": "string"}
            }
        }
        return json.dumps(schema)

    def chat_stream(
        self,
        messages: List[UserMessage | AssistantMessage],
        workflow_schema: str = None,
        current_workflow_config: str = None,
        context: Optional[Dict[str, Any]] = None,
        data_sources: Optional[List[DataSource]] = None
    ) -> Generator[str, None, None]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ /chat_stream –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if workflow_schema is None:
            workflow_schema = self.get_workflow_schema()
        if current_workflow_config is None:
            workflow = self.workflow or self._get_default_workflow()
            current_workflow_config = json.dumps(workflow)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            "messages": [self._message_to_dict(msg) for msg in messages],
            "workflow_schema": workflow_schema,
            "current_workflow_config": current_workflow_config
        }
        
        if context:
            request_data["context"] = context
            
        if data_sources:
            request_data["dataSources"] = [self._datasource_to_dict(ds) for ds in data_sources]
        else:
            request_data["dataSources"] = [self._datasource_to_dict(ds) for ds in self.workflow["datasource"]]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        url = f"{self.base_url}/chat_stream"
        data = json.dumps(request_data).encode('utf-8')
        
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'text/event-stream'
        }
        
        if self.api_key:
            headers['Authorization'] = f'Bearer {self.api_key}'

        req = urllib.request.Request(url, data=data, headers=headers, method='POST')
        
        try:
            with urllib.request.urlopen(req) as response:
                # –ß–∏—Ç–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                for line in response:
                    line = line.decode('utf-8').strip()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SSE —Ñ–æ—Ä–º–∞—Ç
                    if line.startswith('data: '):
                        data_part = line[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                        
                        if data_part == '{}':  # –ö–æ–Ω–µ—Ü –ø–æ—Ç–æ–∫–∞
                            break
                            
                        try:
                            data_json = json.loads(data_part)
                            if 'content' in data_json:
                                yield data_json['content']
                        except json.JSONDecodeError:
                            continue
                    elif line.startswith('event: done'):
                        break
                        
        except urllib.error.HTTPError as e:
            error_msg = e.read().decode('utf-8') if e.fp else str(e)
            raise Exception(f"HTTP –æ—à–∏–±–∫–∞ {e.code}: {error_msg}")
        except urllib.error.URLError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    def chat_stream_simple(
        self,
        user_message: str,
        workflow_schema: str = None,
        current_workflow_config: str = None
    ) -> Generator[str, None, None]:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        messages = [UserMessage(content=user_message)]
        yield from self.chat_stream(messages, workflow_schema, current_workflow_config)

    def get_full_response(
        self,
        messages: List[UserMessage | AssistantMessage],
        workflow_schema: str = None,
        current_workflow_config: str = None,
        context: Optional[Dict[str, Any]] = None,
        data_sources: Optional[List[DataSource]] = None
    ) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Copilot (–Ω–µ –ø–æ—Ç–æ–∫–æ–≤—ã–π)
        """
        full_response = ""
        for chunk in self.chat_stream(messages, workflow_schema, current_workflow_config, context, data_sources):
            full_response += chunk
        return full_response

    def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            url = f"{self.base_url}/health"
            req = urllib.request.Request(url)
            
            with urllib.request.urlopen(req, timeout=5) as response:
                return response.status == 200
        except:
            return False

    def _message_to_dict(self, message: UserMessage | AssistantMessage) -> Dict[str, str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "role": message.role,
            "content": message.content
        }

    def _datasource_to_dict(self, datasource: DataSource) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "_id": datasource["_id"],
            "name": datasource["name"],
            "description": datasource["description"],
            "active": datasource["active"],
            "status": datasource["status"],
            "data": datasource["data"]
        }