#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–π –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import sys
from db import get_collection
from bson import ObjectId

def show_scenarios():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    print("üìã –°—Ü–µ–Ω–∞—Ä–∏–∏:")
    scenarios_collection = get_collection("test_scenarios")
    scenarios = list(scenarios_collection.find())
    
    if not scenarios:
        print("   –ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        return []
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"   {i}. ID: {scenario['_id']}")
        print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {scenario['name']}")
        print(f"      –ü—Ä–æ–µ–∫—Ç: {scenario['projectId']}")
        print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description'][:100]}...")
        print()
    
    return scenarios

def show_simulations():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    print("üîÑ –°–∏–º—É–ª—è—Ü–∏–∏:")
    simulations_collection = get_collection("test_simulations")
    simulations = list(simulations_collection.find())
    
    if not simulations:
        print("   –ù–µ—Ç —Å–∏–º—É–ª—è—Ü–∏–π")
        return []
    
    for i, simulation in enumerate(simulations, 1):
        print(f"   {i}. ID: {simulation['_id']}")
        print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {simulation['name']}")
        print(f"      –ü—Ä–æ–µ–∫—Ç: {simulation['projectId']}")
        print(f"      –°—Ü–µ–Ω–∞—Ä–∏–π ID: {simulation['scenarioId']}")
        print(f"      –ö—Ä–∏—Ç–µ—Ä–∏–∏: {simulation['passCriteria'][:80]}...")
        print()
    
    return simulations

def show_runs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—Å–∫–∏"""
    print("‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∏:")
    runs_collection = get_collection("test_runs")
    runs = list(runs_collection.find())
    
    if not runs:
        print("   –ù–µ—Ç –∑–∞–ø—É—Å–∫–æ–≤")
        return []
    
    for i, run in enumerate(runs, 1):
        print(f"   {i}. ID: {run['_id']}")
        print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {run['name']}")
        print(f"      –ü—Ä–æ–µ–∫—Ç: {run['projectId']}")
        print(f"      –°—Ç–∞—Ç—É—Å: {run['status']}")
        print(f"      –°–∏–º—É–ª—è—Ü–∏–∏: {run.get('simulationIds', [])}")
        print()
    
    return runs

def show_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    results_collection = get_collection("test_results")
    results = list(results_collection.find())
    
    if not results:
        print("   –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return []
    
    for i, result in enumerate(results, 1):
        print(f"   {i}. ID: {result['_id']}")
        print(f"      –ü—Ä–æ–µ–∫—Ç: {result['projectId']}")
        print(f"      –ó–∞–ø—É—Å–∫ ID: {result['runId']}")
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['result']}")
        print()
    
    return results

def delete_by_project():
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É"""
    print("\nüè¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    all_collections = ["test_scenarios", "test_simulations", "test_runs", "test_results"]
    projects = set()
    
    for collection_name in all_collections:
        collection = get_collection(collection_name)
        docs = collection.find({}, {"projectId": 1})
        for doc in docs:
            if "projectId" in doc:
                projects.add(doc["projectId"])
    
    if not projects:
        print("   –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
    project_list = list(projects)
    for i, project_id in enumerate(project_list, 1):
        print(f"   {i}. {project_id}")
    
    try:
        choice = input(f"\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (1-{len(project_list)}) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if choice.lower() == 'q':
            return
        
        project_index = int(choice) - 1
        if project_index < 0 or project_index >= len(project_list):
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        selected_project = project_list[project_index]
        print(f"\n   –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {selected_project}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        total_count = 0
        for collection_name in all_collections:
            collection = get_collection(collection_name)
            count = collection.count_documents({"projectId": selected_project})
            if count > 0:
                print(f"   {collection_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                total_count += count
        
        if total_count == 0:
            print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        confirm = input(f"\n   ‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ {selected_project}? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm in ['–¥–∞', 'yes', 'y']:
            deleted_total = 0
            for collection_name in all_collections:
                collection = get_collection(collection_name)
                result = collection.delete_many({"projectId": selected_project})
                if result.deleted_count > 0:
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ {collection_name}: {result.deleted_count} –∑–∞–ø–∏—Å–µ–π")
                    deleted_total += result.deleted_count
            
            print(f"\n   üéâ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_total} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except (ValueError, IndexError):
        print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

def delete_individual():
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    while True:
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print("   1. –°—Ü–µ–Ω–∞—Ä–∏–∏")
        print("   2. –°–∏–º—É–ª—è—Ü–∏–∏") 
        print("   3. –ó–∞–ø—É—Å–∫–∏")
        print("   4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("   5. –ù–∞–∑–∞–¥")
        
        choice = input("\n   –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-5): ").strip()
        
        if choice == '1':
            delete_scenarios()
        elif choice == '2':
            delete_simulations()
        elif choice == '3':
            delete_runs()
        elif choice == '4':
            delete_results()
        elif choice == '5':
            break
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def delete_scenarios():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    scenarios = show_scenarios()
    if not scenarios:
        return
    
    try:
        choice = input(f"\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(scenarios)}) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if choice.lower() == 'q':
            return
        
        index = int(choice) - 1
        if index < 0 or index >= len(scenarios):
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        scenario = scenarios[index]
        print(f"\n   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π:")
        print(f"   ID: {scenario['_id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {scenario['name']}")
        
        confirm = input("\n   ‚ö†Ô∏è  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm in ['–¥–∞', 'yes', 'y']:
            scenarios_collection = get_collection("test_scenarios")
            result = scenarios_collection.delete_one({"_id": scenario['_id']})
            if result.deleted_count > 0:
                print("   ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except (ValueError, IndexError):
        print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

def delete_simulations():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–π"""
    simulations = show_simulations()
    if not simulations:
        return
    
    try:
        choice = input(f"\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(simulations)}) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if choice.lower() == 'q':
            return
        
        index = int(choice) - 1
        if index < 0 or index >= len(simulations):
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        simulation = simulations[index]
        print(f"\n   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è:")
        print(f"   ID: {simulation['_id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {simulation['name']}")
        
        confirm = input("\n   ‚ö†Ô∏è  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm in ['–¥–∞', 'yes', 'y']:
            simulations_collection = get_collection("test_simulations")
            result = simulations_collection.delete_one({"_id": simulation['_id']})
            if result.deleted_count > 0:
                print("   ‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except (ValueError, IndexError):
        print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

def delete_runs():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–æ–≤"""
    runs = show_runs()
    if not runs:
        return
    
    try:
        choice = input(f"\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(runs)}) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if choice.lower() == 'q':
            return
        
        index = int(choice) - 1
        if index < 0 or index >= len(runs):
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        run = runs[index]
        print(f"\n   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∑–∞–ø—É—Å–∫:")
        print(f"   ID: {run['_id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {run['name']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {run['status']}")
        
        confirm = input("\n   ‚ö†Ô∏è  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm in ['–¥–∞', 'yes', 'y']:
            runs_collection = get_collection("test_runs")
            result = runs_collection.delete_one({"_id": run['_id']})
            if result.deleted_count > 0:
                print("   ‚úÖ –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω")
                
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results_collection = get_collection("test_results")
                results_result = results_collection.delete_many({"runId": str(run['_id'])})
                if results_result.deleted_count > 0:
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_result.deleted_count}")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except (ValueError, IndexError):
        print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

def delete_results():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    results = show_results()
    if not results:
        return
    
    try:
        choice = input(f"\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(results)}) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if choice.lower() == 'q':
            return
        
        index = int(choice) - 1
        if index < 0 or index >= len(results):
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        result_doc = results[index]
        print(f"\n   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   ID: {result_doc['_id']}")
        print(f"   –ó–∞–ø—É—Å–∫ ID: {result_doc['runId']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_doc['result']}")
        
        confirm = input("\n   ‚ö†Ô∏è  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm in ['–¥–∞', 'yes', 'y']:
            results_collection = get_collection("test_results")
            result = results_collection.delete_one({"_id": result_doc['_id']})
            if result.deleted_count > 0:
                print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except (ValueError, IndexError):
        print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

def clear_all():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíÄ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–°–ï–• –î–ê–ù–ù–´–•")
    print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å–∏–º—É–ª—è—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    
    collections = ["test_scenarios", "test_simulations", "test_runs", "test_results"]
    total_count = 0
    
    for collection_name in collections:
        collection = get_collection(collection_name)
        count = collection.count_documents({})
        if count > 0:
            print(f"   {collection_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            total_count += count
    
    if total_count == 0:
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    print(f"\n   –í—Å–µ–≥–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {total_count} –∑–∞–ø–∏—Å–µ–π")
    
    deleted_total = 0
    for collection_name in collections:
        collection = get_collection(collection_name)
        result = collection.delete_many({})
        if result.deleted_count > 0:
            print(f"   ‚úÖ –û—á–∏—â–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}: {result.deleted_count} –∑–∞–ø–∏—Å–µ–π")
            deleted_total += result.deleted_count
    
    print(f"\n   üéâ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ: {deleted_total} –∑–∞–ø–∏—Å–µ–π")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\n" + "=" * 60)
        print("   –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò –°–ò–ú–£–õ–Ø–¶–ò–ô")
        print("=" * 60)
        
        print("   1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
        print("   2. –£–¥–∞–ª–∏—Ç—å –ø–æ –ø—Ä–æ–µ–∫—Ç—É")
        print("   3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
        print("   4. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–û–ü–ê–°–ù–û!)")
        print("   5. –í—ã—Ö–æ–¥")
        
        choice = input("\n   –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == '1':
            print("\n" + "=" * 40)
            show_scenarios()
            print("\n" + "=" * 40)
            show_simulations()
            print("\n" + "=" * 40)
            show_runs()
            print("\n" + "=" * 40)
            show_results()
            
        elif choice == '2':
            delete_by_project()
            
        elif choice == '3':
            delete_individual()
            
        elif choice == '4':
            clear_all()
            
        elif choice == '5':
            print("   üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n   ‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n   ‚ùå –û—à–∏–±–∫–∞: {e}") 