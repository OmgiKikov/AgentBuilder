#!/usr/bin/env python3
"""
–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–π
"""

import asyncio
import os
import json
from datetime import datetime, timezone
from bson import ObjectId

from db import get_collection
from service import JobService
from check_db import get_simulation_pairs

def json_serializer(obj):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è JSON"""
    if isinstance(obj, ObjectId):
        return str(obj)
    if isinstance(obj, datetime):
        return obj.isoformat()
    raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

def create_test_run(project_id: str, workflow_id: str, simulation_id: str, simulation_name: str):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –æ–¥–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
    """
    runs_collection = get_collection("test_runs")
    
    # –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –∑–∞–ø—É—Å–∫
    run_id = str(ObjectId())
    test_run = {
        "_id": ObjectId(run_id),
        "projectId": project_id,
        "name": f"–ê–≤—Ç–æ—Ç–µ—Å—Ç: {simulation_name}",
        "simulationIds": [simulation_id],
        "workflowId": workflow_id,
        "status": "pending",
        "startedAt": datetime.now(timezone.utc),
        "completedAt": None,
        "aggregateResults": None,
        "lastHeartbeat": None
    }
    
    runs_collection.insert_one(test_run)
    return run_id

async def run_single_simulation(simulation_data: dict, workflow_id: str, max_dialog_iterations: int = 2):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É —Å–∏–º—É–ª—è—Ü–∏—é
    """
    print("=" * 80)
    print(f"   –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò: {simulation_data['name']}")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
    os.environ["ROWBOAT_API_HOST"] = "http://127.0.0.1:3000"
    
    print(f"üè¢ –ü—Ä–æ–µ–∫—Ç: {simulation_data['project_id']}")
    print(f"‚ö° Workflow: {workflow_id}")
    print(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {simulation_data['scenario_id']}")
    print(f"üîÑ –°–∏–º—É–ª—è—Ü–∏—è: {simulation_data['simulation_id']}")
    print(f"üí¨ –ò—Ç–µ—Ä–∞—Ü–∏–π –¥–∏–∞–ª–æ–≥–∞: {max_dialog_iterations}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫
    run_id = create_test_run(
        project_id=simulation_data['project_id'],
        workflow_id=workflow_id,
        simulation_id=simulation_data['simulation_id'],
        simulation_name=simulation_data['name']
    )
    print(f"‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫: {run_id} (—Å—Ç–∞—Ç—É—Å: pending)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
    service = JobService()
    
    try:
        await service.poll_and_process_jobs(max_iterations_pre_m=20, max_iterations=max_dialog_iterations)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    runs_collection = get_collection("test_runs")
    final_run = runs_collection.find_one({"_id": ObjectId(run_id)})
    
    results_collection = get_collection("test_results")
    test_results = list(results_collection.find({"runId": run_id}))
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ '{simulation_data['name']}':")
    if final_run:
        print(f"   –°—Ç–∞—Ç—É—Å: {final_run['status']}")
        if final_run.get('aggregateResults'):
            results = final_run['aggregateResults']
            print(f"   –í—Å–µ–≥–æ: {results.get('total', 0)}")
            print(f"   –£—Å–ø–µ—à–Ω–æ: {results.get('passCount', 0)}")
            print(f"   –ù–µ—É–¥–∞—á–Ω–æ: {results.get('failCount', 0)}")
    
    if test_results:
        for i, result in enumerate(test_results, 1):
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {result.get('result', 'unknown')}")
            print(f"   –î–µ—Ç–∞–ª–∏: {result.get('details', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π')[:100]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            filename = f"result_{simulation_data['name'].replace(' ', '_')}_{run_id}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=4, default=json_serializer)
            print(f"   üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
    else:
        print("   ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    print()
    return {
        "simulation_name": simulation_data['name'],
        "run_id": run_id,
        "status": final_run['status'] if final_run else "unknown",
        "results_count": len(test_results)
    }

def get_project_workflow_mapping():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –∏—Ö workflow ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    workflows_collection = get_collection('agent_workflows')
    workflows = list(workflows_collection.find({}))
    
    project_workflow_map = {}
    for workflow in workflows:
        project_id = workflow.get('projectId')
        workflow_id = str(workflow['_id'])
        project_workflow_map[project_id] = workflow_id
    
    return project_workflow_map

async def run_batch_simulations():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
    """
    print("=" * 80)
    print("   –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ú–£–õ–Ø–¶–ò–ô")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ runtime.json
    simulation_pairs = get_simulation_pairs()
    
    if not simulation_pairs:
        print("‚ùå –°–∏–º—É–ª—è—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å–∏–º—É–ª—è—Ü–∏–π: {len(simulation_pairs)}")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–û–õ–¨–ö–û –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
    runs_collection = get_collection("test_runs")
    results_collection = get_collection("test_results")
    
    deleted_runs = runs_collection.delete_many({"name": {"$regex": "^–ê–≤—Ç–æ—Ç–µ—Å—Ç:"}})
    deleted_results = results_collection.delete_many({})
    print(f"\nüßπ –û—á–∏—â–µ–Ω–æ {deleted_runs.deleted_count} —Å—Ç–∞—Ä—ã—Ö –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤")
    print(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_results.deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–∏–º—É–ª—è—Ü–∏—é
    batch_results = []
    
    for i, simulation_data in enumerate(simulation_pairs, 1):
        project_id = simulation_data["project_id"]
        workflow_id = simulation_data.get("workflow_id")
        max_iterations = simulation_data.get("MAX_DIALOG_ITERATIONS", 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ workflow –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if not workflow_id:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç {project_id[:8]}... - workflow –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(simulation_pairs)}")
        
        result = await run_single_simulation(
            simulation_data=simulation_data,
            workflow_id=workflow_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow_id –∏–∑ get_simulation_pairs()
            max_dialog_iterations=max_iterations  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MAX_DIALOG_ITERATIONS –∏–∑ runtime.json
        )
        
        if result:
            batch_results.append(result)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º—É–ª—è—Ü–∏—è–º–∏
        if i < len(simulation_pairs):
            print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π...")
            await asyncio.sleep(3)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 80)
    print("   –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    
    for result in batch_results:
        print(f"‚úÖ {result['simulation_name']}: {result['status']} ({result['results_count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º—É–ª—è—Ü–∏–π: {len(batch_results)}/{len(simulation_pairs)}")
    
    skipped = len(simulation_pairs) - len(batch_results)
    if skipped > 0:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped} —Å–∏–º—É–ª—è—Ü–∏–π (–Ω–µ—Ç workflow)")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ runtime.json –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö workflow")

if __name__ == "__main__":
    asyncio.run(run_batch_simulations()) 