import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

from db import get_collection
from bson import ObjectId
import json

def get_simulation_pairs():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (scenario_id, simulation_id) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ runtime.json
    """
    simulations_collection = get_collection("test_simulations")
    simulations = list(simulations_collection.find())
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ runtime.json
    runtime_file = 'benchmark_DJ/run_time/runtime.json'
    runtime_data = {}
    
    if os.path.exists(runtime_file):
        try:
            with open(runtime_file, 'r', encoding='utf-8') as f:
                runtime_list = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ project_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                for item in runtime_list:
                    project_id = item.get('simulation_name')
                    if project_id:
                        runtime_data[project_id] = item
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ runtime.json: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º workflow –º–∞–ø–ø–∏–Ω–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    workflows_collection = get_collection('agent_workflows')
    workflows = list(workflows_collection.find({}))
    workflow_map = {}
    for workflow in workflows:
        project_id = workflow.get('projectId')
        workflow_id = str(workflow['_id'])
        workflow_map[project_id] = workflow_id
    
    pairs = []
    for sim in simulations:
        scenario_id = sim.get("scenarioId")
        simulation_id = str(sim["_id"])
        project_id = sim.get("projectId")
        name = sim.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        if scenario_id and simulation_id:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            pair_data = {
                "scenario_id": scenario_id,
                "simulation_id": simulation_id,
                "project_id": project_id,
                "name": name
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º workflow_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if project_id in workflow_map:
                pair_data["workflow_id"] = workflow_map[project_id]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ runtime.json
            if name in runtime_data:
                runtime_info = runtime_data[name]
                pair_data.update({
                    "REAL_WORKFLOW_ID": runtime_info.get("REAL_WORKFLOW_ID"),
                    "scenario_name": runtime_info.get("scenario_name"),
                    "scenario_description": runtime_info.get("scenario_description"),
                    "simulation_name": runtime_info.get("simulation_name"),
                    "profileId": runtime_info.get("profileId"),
                    "passCriteria": runtime_info.get("passCriteria"),
                    "MAX_DIALOG_ITERATIONS": runtime_info.get("MAX_DIALOG_ITERATIONS", 2)
                })
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow_id –∏–∑ runtime.json, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if runtime_info.get("REAL_WORKFLOW_ID"):
                    pair_data["workflow_id"] = runtime_info["REAL_WORKFLOW_ID"]
            else:
                # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ runtime.json
                pair_data.update({
                    "MAX_DIALOG_ITERATIONS": 2,
                    "profileId": "real_test_profile",
                    "passCriteria": "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤–µ–∂–ª–∏–≤–æ"
                })
            
            pairs.append(pair_data)
    
    return pairs

def check_database():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collections_to_check = [
        "test_scenarios",
        "test_simulations", 
        "test_runs",
        "test_results",
        "api_keys"
    ]
    
    for collection_name in collections_to_check:
        print(f"üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")
        collection = get_collection(collection_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = list(collection.find())
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for i, doc in enumerate(documents[:3]):
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç {i+1}:")
            for key, value in doc.items():
                if key == "_id":
                    print(f"      {key}: {value}")
                else:
                    print(f"      {key}: {value}")
            print()
        
        if len(documents) > 3:
            print(f"   ... –∏ –µ—â–µ {len(documents) - 3} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n")
        else:
            print()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º pending runs
    print("üîç –ü–æ–∏—Å–∫ pending runs:")
    runs_collection = get_collection("test_runs")
    pending_runs = list(runs_collection.find({"status": "pending"}))
    print(f"   –ù–∞–π–¥–µ–Ω–æ pending runs: {len(pending_runs)}")
    
    for run in pending_runs:
        print(f"   - ID: {run['_id']}, —Å—Ç–∞—Ç—É—Å: {run['status']}, –ø—Ä–æ–µ–∫—Ç: {run['projectId']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    pairs = get_simulation_pairs()
    for i, pair in enumerate(pairs, 1):
        print(f"   {i}. {pair['name']}")
        print(f"      –ü—Ä–æ–µ–∫—Ç: {pair['project_id']}")
        print(f"      –°—Ü–µ–Ω–∞—Ä–∏–π: {pair['scenario_id']}")
        print(f"      –°–∏–º—É–ª—è—Ü–∏—è: {pair['simulation_id']}")
        print()
    
    return pairs

if __name__ == "__main__":
    check_database() 