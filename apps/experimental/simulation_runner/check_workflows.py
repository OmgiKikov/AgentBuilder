#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ workflow –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db import get_collection
from bson import ObjectId

def check_workflows():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç workflow –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ agent_workflows
    """
    print("=== WORKFLOW –í –ö–û–õ–õ–ï–ö–¶–ò–ò agent_workflows ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é agent_workflows
    workflows_collection = get_collection('agent_workflows')
    workflows = list(workflows_collection.find({}))
    
    print(f"–í—Å–µ–≥–æ workflow: {len(workflows)}")
    
    if not workflows:
        print("‚ùå Workflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    for i, workflow in enumerate(workflows, 1):
        print(f"\n{i}. Workflow ID: {workflow['_id']}")
        print(f"   –ü—Ä–æ–µ–∫—Ç: {workflow.get('projectId', '–ù–ï–¢')}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {workflow.get('name', '–ù–ï–¢')}")
        print(f"   –°–æ–∑–¥–∞–Ω: {workflow.get('createdAt', '–ù–ï–¢')}")
        print(f"   –ê–≥–µ–Ω—Ç—ã: {len(workflow.get('agents', []))}")
        print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(workflow.get('tools', []))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤
        agents = workflow.get('agents', [])
        if agents:
            print(f"   –ê–≥–µ–Ω—Ç—ã:")
            for j, agent in enumerate(agents[:3], 1):
                print(f"     {j}. {agent.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
    
    print("\n=== PUBLISHED WORKFLOW ID –í –ü–†–û–ï–ö–¢–ê–• ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º publishedWorkflowId –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    projects_collection = get_collection('projects')
    projects = list(projects_collection.find({}))
    
    for project in projects:
        project_id = project['_id']
        project_name = project.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        published_id = project.get('publishedWorkflowId')
        print(f"–ü—Ä–æ–µ–∫—Ç {project_id[:8]}... ({project_name}): publishedWorkflowId = {published_id}")
    
    print("\n=== –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–û–í –ò WORKFLOW ===")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º workflow –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    workflow_by_project = {}
    for workflow in workflows:
        project_id = workflow.get('projectId')
        if project_id not in workflow_by_project:
            workflow_by_project[project_id] = []
        workflow_by_project[project_id].append(workflow)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    for project in projects:
        project_id = project['_id']
        project_name = project.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        project_workflows = workflow_by_project.get(project_id, [])
        published_id = project.get('publishedWorkflowId')
        
        print(f"\nüè¢ –ü—Ä–æ–µ–∫—Ç: {project_name} - {project_id}")
        
        for workflow in project_workflows:
            workflow_id = str(workflow['_id'])
            workflow_name = workflow.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            is_published = "‚úÖ PUBLISHED" if workflow_id == published_id else ""
            print(f"     - {workflow_id} ({workflow_name})")

if __name__ == "__main__":
    check_workflows() 